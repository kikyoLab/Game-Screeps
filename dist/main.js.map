{"version":3,"file":"main.js","sources":["../src/modules/utils.js","../src/modules/errorMapper.js","../src/main.js"],"sourcesContent":["\r\nexport const sayHello = function () {\r\n    console.log('hello world')\r\n}","/**\r\n * 校正异常的堆栈信息\r\n * \r\n * 由于 rollup 会打包所有代码到一个文件，所以异常的调用栈定位和源码的位置是不同的\r\n * 本模块就是用来将异常的调用栈映射至源代码位置\r\n * \r\n * @see https://github.com/screepers/screeps-typescript-starter/blob/master/src/utils/ErrorMapper.ts\r\n */\r\n\r\nimport { SourceMapConsumer } from 'source-map'\r\n\r\n/* 缓存 SourceMap */\r\nlet consumer = null\r\n\r\n/* 第一次报错时创建 sourceMap */\r\nconst getConsumer = function () {\r\n    if (consumer == null) consumer = new SourceMapConsumer(require(\"main.js.map\"))\r\n    return consumer\r\n}\r\n\r\n/* 缓存映射关系以提高性能 */\r\nconst cache = {}\r\n\r\n/**\r\n * 使用源映射生成堆栈跟踪，并生成原始标志位\r\n * 警告 - global 重置之后的首次调用会产生很高的 cpu 消耗 (> 30 CPU)\r\n * 之后的每次调用会产生较低的 cpu 消耗 (~ 0.1 CPU / 次)\r\n *\r\n * @param {Error | string} error 错误或原始追踪栈\r\n * @returns {string} 映射之后的源代码追踪栈\r\n */\r\nconst sourceMappedStackTrace = function (error) {\r\n    const stack = error instanceof Error ? error.stack : error\r\n    /* 有缓存直接用 */\r\n    if (cache.hasOwnProperty(stack)) return cache[stack]\r\n\r\n    const re = /^\\s+at\\s+(.+?\\s+)?\\(?([0-z._\\-\\\\\\/]+):(\\d+):(\\d+)\\)?$/gm\r\n    let match\r\n    let outStack = error.toString()\r\n    console.log(\"ErrorMapper -> sourceMappedStackTrace -> outStack\", outStack)\r\n\r\n    while ((match = re.exec(stack))) {\r\n        /* 解析完成 */\r\n        if (match[2] !== \"main\") break\r\n\r\n        /* 获取追踪定位 */\r\n        const pos = getConsumer().originalPositionFor({\r\n            column: parseInt(match[4], 10),\r\n            line: parseInt(match[3], 10)\r\n        })\r\n\r\n        /* 无法定位 */\r\n        if (!pos.line) break\r\n\r\n        /* 解析追踪栈 */\r\n        if (pos.name) outStack += `\\n    at ${pos.name} (${pos.source}:${pos.line}:${pos.column})`\r\n        else {\r\n            /* 源文件没找到对应文件名，采用原始追踪名 */\r\n            if (match[1]) outStack += `\\n    at ${match[1]} (${pos.source}:${pos.line}:${pos.column})`\r\n            /* 源文件没找到对应文件名并且原始追踪栈里也没有，直接省略 */\r\n            else outStack += `\\n    at ${pos.source}:${pos.line}:${pos.column}`\r\n        }\r\n    }\r\n\r\n    cache[stack] = outStack\r\n    return outStack\r\n}\r\n\r\n/**\r\n * 错误追踪包装器\r\n * 用于把报错信息通过 source-map 解析成源代码的错误位置\r\n * 和原本 wrapLoop 的区别是，wrapLoop 会返回一个新函数，而这个会直接执行\r\n * \r\n * @param next 玩家代码\r\n */\r\nexport const errorMapper = function (next) {\r\n    return () => {\r\n        try {\r\n            /* 执行玩家代码 */\r\n            next()\r\n        }\r\n        catch (e) {\r\n            if (e instanceof Error) {\r\n                /* 渲染报错调用栈，沙盒模式用不了这个 */\r\n                const errorMessage = Game.rooms.sim ?\r\n                    `沙盒模式无法使用 source-map - 显示原始追踪栈<br>\r\n                    ${_.escape(e.stack)}` : `${_.escape(sourceMappedStackTrace(e))}`\r\n\r\n                console.log(`<text style=\"color:#ef9a9a\">${errorMessage}</text>`)\r\n            }\r\n            /* 处理不了，直接抛出 */\r\n            else throw e\r\n        }\r\n    }\r\n}","import { sayHello } from './modules/utils'\r\nimport { errorMapper } from './modules/errorMapper'\r\n\r\nexport const loop = errorMapper(() => {\r\n    sayHello()\r\n})"],"names":["SourceMapConsumer"],"mappings":"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"}